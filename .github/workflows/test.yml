name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    name: Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.changes.outputs.modules }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed modules
        id: changes
        run: |
          # Get list of all modules (excluding frozen ones)
          all_modules=$(find . -name "go.mod" -exec dirname {} \; | sed 's|^\./||' | sort)
          # Exclude frozen/deprecated modules - add more to the grep pattern if needed
          # Current frozen modules: aferofs
          modules=$(echo "$all_modules" | grep -v "^aferofs$" || true)
          echo "All modules found: $all_modules"
          echo "Active modules (excluding frozen): $modules"
          
          # For PR, compare against target branch; for push, compare against previous commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="${{ github.event.pull_request.base.sha }}"
          else
            base_ref="${{ github.event.before }}"
          fi
          
          # If base_ref is empty or 0000... (initial commit), test all modules
          if [ -z "$base_ref" ] || [ "$base_ref" = "0000000000000000000000000000000000000000" ]; then
            echo "Initial commit or no base ref, testing all modules"
            changed_modules="$modules"
          else
            # Get changed files
            changed_files=$(git diff --name-only "$base_ref" HEAD)
            echo "Changed files: $changed_files"
            
            # Find modules that have changes
            changed_modules=""
            for module in $modules; do
              if echo "$changed_files" | grep -q "^$module/"; then
                changed_modules="$changed_modules $module"
              fi
            done
            
            # If no modules detected but files changed, might be root files affecting all
            if [ -z "$changed_modules" ] && [ -n "$changed_files" ]; then
              # Check if any root-level Go files changed that might affect all modules
              if echo "$changed_files" | grep -E '\.(go|mod|sum)$' | grep -v '/'; then
                echo "Root-level Go files changed, testing all modules"
                changed_modules="$modules"
              fi
            fi
          fi
          
          # Remove leading/trailing spaces and convert to array
          changed_modules=$(echo $changed_modules | xargs)
          
          if [ -z "$changed_modules" ]; then
            echo "No Go modules changed"
            echo "modules=[]" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "Changed modules: $changed_modules"
            
            # Convert to JSON array for modules - ensure no empty lines
            # First create a simple array by splitting on spaces
            IFS=' ' read -ra module_array <<< "$changed_modules"
            
            # Build JSON array manually to avoid jq issues
            modules_json="["
            first=true
            for mod in "${module_array[@]}"; do
              if [ "$first" = true ]; then
                modules_json="${modules_json}\"${mod}\""
                first=false
              else
                modules_json="${modules_json},\"${mod}\""
              fi
            done
            modules_json="${modules_json}]"
            
            echo "Generated modules JSON: $modules_json"
            echo "modules=$modules_json" >> $GITHUB_OUTPUT
            
            # Create matrix for all combinations of OS/arch and modules
            matrix_include=""
            for module in $changed_modules; do
              for os_arch in "ubuntu-latest:linux/amd64" "ubuntu-latest:linux/arm64" "macos-latest:darwin/amd64" "macos-14:darwin/arm64" "windows-latest:windows/amd64"; do
                os=$(echo $os_arch | cut -d: -f1)
                arch=$(echo $os_arch | cut -d: -f2)
                if [ -z "$matrix_include" ]; then
                  matrix_include="{\"os\":\"$os\",\"arch\":\"$arch\",\"module\":\"$module\"}"
                else
                  matrix_include="$matrix_include,{\"os\":\"$os\",\"arch\":\"$arch\",\"module\":\"$module\"}"
                fi
              done
            done
            
            if [ -n "$matrix_include" ]; then
              echo "matrix={\"include\":[$matrix_include]}" >> $GITHUB_OUTPUT
            else
              echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            fi
          fi

  test:
    name: Test ${{ matrix.module }} on ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.modules != '[]'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: ${{ matrix.module }}/go.sum

      - name: Set up QEMU (for ARM64 emulation on Linux)
        if: matrix.arch == 'linux/arm64'
        uses: docker/setup-qemu-action@v3

      - name: Test module
        working-directory: ${{ matrix.module }}
        shell: bash
        env:
          GOOS: ${{ matrix.arch == 'linux/amd64' && 'linux' || matrix.arch == 'linux/arm64' && 'linux' || matrix.arch == 'darwin/amd64' && 'darwin' || matrix.arch == 'darwin/arm64' && 'darwin' || matrix.arch == 'windows/amd64' && 'windows' || '' }}
          GOARCH: ${{ matrix.arch == 'linux/amd64' && 'amd64' || matrix.arch == 'linux/arm64' && 'arm64' || matrix.arch == 'darwin/amd64' && 'amd64' || matrix.arch == 'darwin/arm64' && 'arm64' || matrix.arch == 'windows/amd64' && 'amd64' || '' }}
        run: |
          echo "Testing module: ${{ matrix.module }}"
          echo "Target OS/Arch: $GOOS/$GOARCH"
          echo "Runner OS: ${{ runner.os }}"
          
          # Download and verify dependencies
          go mod download
          go mod verify
          
          # Run tests with race detection and coverage
          if [ "${{ runner.os }}" = "Linux" ] && [ "${{ matrix.arch }}" = "linux/arm64" ]; then
            # ARM64 on Linux - run with emulation, might be slower
            echo "Running ARM64 tests with emulation"
            go test -timeout 5m ./...
          else
            # Native execution
            echo "Running native tests"
            go test -race -timeout 2m ./...
          fi
          
          # Run go vet
          go vet ./...

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: always()
    steps:
      - name: Summary
        run: |
          if [ "${{ needs.detect-changes.outputs.modules }}" = "[]" ]; then
            echo "✅ No Go modules were affected by the changes"
          elif [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ All tests passed for affected modules"
          elif [ "${{ needs.test.result }}" = "skipped" ]; then
            echo "⏭️ Tests were skipped"
          else
            echo "❌ Some tests failed"
            exit 1
          fi