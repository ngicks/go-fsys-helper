// Code generated by github.com/ngicks/go-fsys-helper/aferofs/cmd/implwrapper. DO NOT EDIT.
package aferofs

import (
	"os"
	"time"

	"github.com/spf13/afero"
)

func (fsys *ObservableFs) Create(name string) (f afero.File, err error) {
	fsys.beforeEach("Create", name)
	f, err = fsys.inner.Create(name)
	fsys.afterEach("Create", err)
	f = fsys.modifyFile("Create", f)
	return
}

func (fsys *ObservableFs) Mkdir(name string, perm os.FileMode) (err error) {
	fsys.beforeEach("Mkdir", name, perm)
	err = fsys.inner.Mkdir(name, perm)
	fsys.afterEach("Mkdir", err)
	return
}

func (fsys *ObservableFs) MkdirAll(path string, perm os.FileMode) (err error) {
	fsys.beforeEach("MkdirAll", path, perm)
	err = fsys.inner.MkdirAll(path, perm)
	fsys.afterEach("MkdirAll", err)
	return
}

func (fsys *ObservableFs) Open(name string) (f afero.File, err error) {
	fsys.beforeEach("Open", name)
	f, err = fsys.inner.Open(name)
	fsys.afterEach("Open", f, err)
	f = fsys.modifyFile("Open", f)
	return
}

func (fsys *ObservableFs) OpenFile(name string, flag int, perm os.FileMode) (f afero.File, err error) {
	fsys.beforeEach("OpenFile", name, flag, perm)
	f, err = fsys.inner.OpenFile(name, flag, perm)
	fsys.afterEach("OpenFile", f, err)
	f = fsys.modifyFile("OpenFile", f)
	return
}

func (fsys *ObservableFs) Remove(name string) (err error) {
	fsys.beforeEach("Remove", name)
	err = fsys.inner.Remove(name)
	fsys.afterEach("Remove", err)
	return
}

func (fsys *ObservableFs) RemoveAll(path string) (err error) {
	fsys.beforeEach("RemoveAll", path)
	err = fsys.inner.RemoveAll(path)
	fsys.afterEach("RemoveAll", err)
	return
}

func (fsys *ObservableFs) Rename(oldname, newname string) (err error) {
	fsys.beforeEach("Rename", oldname, newname)
	err = fsys.inner.Rename(oldname, newname)
	fsys.afterEach("Rename", err)
	return
}

func (fsys *ObservableFs) Stat(name string) (fi os.FileInfo, err error) {
	fsys.beforeEach("Stat", name)
	fi, err = fsys.inner.Stat(name)
	fsys.afterEach("Stat", fi, err)
	return
}

func (fsys *ObservableFs) Name() (s string) {
	fsys.beforeEach("Name")
	s = fsys.inner.Name()
	fsys.afterEach("Name", s)
	return
}

func (fsys *ObservableFs) Chmod(name string, mode os.FileMode) (err error) {
	fsys.beforeEach("Chmod", name)
	err = fsys.inner.Chmod(name, mode)
	fsys.afterEach("Chmod", err)
	return
}

func (fsys *ObservableFs) Chown(name string, uid, gid int) (err error) {
	fsys.beforeEach("Chown", name, uid, gid)
	err = fsys.inner.Chown(name, uid, gid)
	fsys.afterEach("Chown", err)
	return
}

func (fsys *ObservableFs) Chtimes(name string, atime time.Time, mtime time.Time) (err error) {
	fsys.beforeEach("Chtimes", name, atime, mtime)
	err = fsys.inner.Chtimes(name, atime, mtime)
	fsys.afterEach("Chtimes", err)
	return
}
