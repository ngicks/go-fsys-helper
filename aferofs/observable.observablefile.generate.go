// Code generated by github.com/ngicks/go-f-helper/aferofs/cmd/implwrapper. DO NOT EDIT.
package aferofs

import (
	"io/fs"
)

func (recv *ObservableFile) Close() (err error) {
	if checkErr := recv.beforeEach("Close"); checkErr != nil {
		err = checkErr
		return
	}
	err = recv.inner.Close()
	if checkErr := recv.afterEach("Close", err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Name() (s string) {
	_ = recv.beforeEach("Name")
	s = recv.inner.Name()
	_ = recv.afterEach("Name", s)
	return
}

func (recv *ObservableFile) Read(p []byte) (n int, err error) {
	if checkErr := recv.beforeEach("Read", p); checkErr != nil {
		err = checkErr
		return
	}
	n, err = recv.inner.Read(p)
	if checkErr := recv.afterEach("Read", n, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) ReadAt(p []byte, off int64) (n int, err error) {
	if checkErr := recv.beforeEach("ReadAt", p, off); checkErr != nil {
		err = checkErr
		return
	}
	n, err = recv.inner.ReadAt(p, off)
	if checkErr := recv.afterEach("ReadAt", n, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Readdir(count int) (fi []fs.FileInfo, err error) {
	if checkErr := recv.beforeEach("Readdir", count); checkErr != nil {
		err = checkErr
		return
	}
	fi, err = recv.inner.Readdir(count)
	if checkErr := recv.afterEach("Readdir", fi, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Readdirnames(n int) (s []string, err error) {
	if checkErr := recv.beforeEach("Readdirnames", n); checkErr != nil {
		err = checkErr
		return
	}
	s, err = recv.inner.Readdirnames(n)
	if checkErr := recv.afterEach("Readdirnames", s, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Seek(offset int64, whence int) (n int64, err error) {
	if checkErr := recv.beforeEach("Seek", offset, whence); checkErr != nil {
		err = checkErr
		return
	}
	n, err = recv.inner.Seek(offset, whence)
	if checkErr := recv.afterEach("Seek", n, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Stat() (fi fs.FileInfo, err error) {
	if checkErr := recv.beforeEach("Stat"); checkErr != nil {
		err = checkErr
		return
	}
	fi, err = recv.inner.Stat()
	if checkErr := recv.afterEach("Stat", fi, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Sync() (err error) {
	if checkErr := recv.beforeEach("Sync"); checkErr != nil {
		err = checkErr
		return
	}
	err = recv.inner.Sync()
	if checkErr := recv.afterEach("Sync", err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Truncate(size int64) (err error) {
	if checkErr := recv.beforeEach("Truncate", size); checkErr != nil {
		err = checkErr
		return
	}
	err = recv.inner.Truncate(size)
	if checkErr := recv.afterEach("Truncate", err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) Write(p []byte) (n int, err error) {
	if checkErr := recv.beforeEach("Write", p); checkErr != nil {
		err = checkErr
		return
	}
	n, err = recv.inner.Write(p)
	if checkErr := recv.afterEach("Write", n, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) WriteAt(p []byte, off int64) (n int, err error) {
	if checkErr := recv.beforeEach("WriteAt", p, off); checkErr != nil {
		err = checkErr
		return
	}
	n, err = recv.inner.WriteAt(p, off)
	if checkErr := recv.afterEach("WriteAt", n, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}

func (recv *ObservableFile) WriteString(s string) (n int, err error) {
	if checkErr := recv.beforeEach("WriteString", s); checkErr != nil {
		err = checkErr
		return
	}
	n, err = recv.inner.WriteString(s)
	if checkErr := recv.afterEach("WriteString", n, err); checkErr != nil {
		err = checkErr
		return
	}
	return
}
