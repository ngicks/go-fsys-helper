// Code generated by github.com/ngicks/go-f-helper/aferofs/cmd/implwrapper. DO NOT EDIT.
package aferofs

import (
	"io/fs"
)

func (f *ObservableFile) Close() (err error) {
	f.beforeEach("Close")
	err = f.inner.Close()
	f.afterEach("Close", err)
	return
}

func (f *ObservableFile) Name() (s string) {
	f.beforeEach("Name")
	s = f.inner.Name()
	f.afterEach("Name", s)
	return
}

func (f *ObservableFile) Read(p []byte) (n int, err error) {
	f.beforeEach("Read", p)
	n, err = f.inner.Read(p)
	f.afterEach("Read", n, err)
	return
}

func (f *ObservableFile) ReadAt(p []byte, off int64) (n int, err error) {
	f.beforeEach("ReadAt", p, off)
	n, err = f.inner.ReadAt(p, off)
	f.afterEach("ReadAt", n, err)
	return
}

func (f *ObservableFile) Readdir(count int) (fi []fs.FileInfo, err error) {
	f.beforeEach("Readdir", count)
	fi, err = f.inner.Readdir(count)
	f.afterEach("Readdir", fi, err)
	return
}

func (f *ObservableFile) Readdirnames(n int) (s []string, err error) {
	f.beforeEach("Readdirnames", n)
	s, err = f.inner.Readdirnames(n)
	f.afterEach("Readdirnames", s, err)
	return
}

func (f *ObservableFile) Seek(offset int64, whence int) (n int64, err error) {
	f.beforeEach("Seek", offset, whence)
	n, err = f.inner.Seek(offset, whence)
	f.afterEach("Seek", n, err)
	return
}

func (f *ObservableFile) Stat() (fi fs.FileInfo, err error) {
	f.beforeEach("Stat")
	fi, err = f.inner.Stat()
	f.afterEach("Stat", fi, err)
	return
}

func (f *ObservableFile) Sync() (err error) {
	f.beforeEach("Sync")
	err = f.inner.Sync()
	f.afterEach("Sync", err)
	return
}

func (f *ObservableFile) Truncate(size int64) (err error) {
	f.beforeEach("Truncate", size)
	err = f.inner.Truncate(size)
	f.afterEach("Truncate", err)
	return
}

func (f *ObservableFile) Write(p []byte) (n int, err error) {
	f.beforeEach("Write", p)
	n, err = f.inner.Write(p)
	f.afterEach("Write", err)
	return
}

func (f *ObservableFile) WriteAt(p []byte, off int64) (n int, err error) {
	f.beforeEach("WriteAt", p, off)
	n, err = f.inner.WriteAt(p, off)
	f.afterEach("WriteAt", err)
	return
}

func (f *ObservableFile) WriteString(s string) (n int, err error) {
	f.beforeEach("WriteString", s)
	n, err = f.inner.WriteString(s)
	f.afterEach("WriteString", n, err)
	return
}
